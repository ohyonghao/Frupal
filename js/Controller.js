class Controller{
    
    constructor( charModel /* mapModel, mapview */ ){
        // Set the pieces it controls
        //this.mapModel = mapModel;
        this.charModel = charModel;
    }

    // Slot for moving in Cardinal Directions
    moveNorth(){
        this.move ( 'N' );
    }
    moveSouth(){
       this.move ( 'S' );
    }
    moveEast(){
        this.move ('E');
    }
    moveWest(){
        this.move ('E');
    }

    // Actual Move call logic
    // Game logic goes here
    move( Dir ){
        // Get current location
        var x = this.charModel.x;
        var y = this.charModel.y;
        //var tile = mapmodel.nextDirection( Dir, x, y );

        // Check the tile
        // If cannot move into tile then penalize
        // else move into tile

        // Check tile for Diamond

        // If Diamond, then win the game

        //charModel.move( newtile.x, newtile.y, 1 );
        this.charModel.move( x+1, y, 1 );

        // Check if character is now dead from moving
        if(this.charModel.isDead()){
            alert("Oh no! You died!!");
        }

        this.drawGame();
    }


    drawGame(){
        //this.mapView.redraw();
        this.statView.draw();
    }


    saveModel(){
        localStorage.setItem('FrupalModel:A-Team', JSON.stringify(this.theModel));
    }

    initializeModelAndViews(){
        // Load our model from LocalStorage if it's there
        let modelAsString = localStorage.getItem('FrupalModel:A-Team');
        if (modelAsString != undefined && modelAsString != "null") {
            this.theModel = JSON.parse(modelAsString);   // It was stored, so reload it
            // TODO: Validate that we loaded a good, non-corrupted model.
            // We might need some version number stored in our model.
        } else {
            // There was no previous game session stored. Create one now
            // by calling the buildModel function defined in the
            // external ModelBuilder file generated by loadMap.py
            this.theModel = buildModel();
            this.saveModel();
        }

        // Now that we have the Models, create their Views
        //this.mapModel = this.theModel.mapModel;
        //this.mapView = new MapView(this.mapModel);

        this.charModel = this.theModel.charModel;
        this.statView = new StatView(this.theModel.charModel);

        this.drawGame();

        return this.theModel;
    }
}
